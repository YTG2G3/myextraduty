// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean   @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts     Account[]
    sessions     Session[]
    ownedSchools School[]
    enrollments  Enrollment[]
    assignments  Assignment[]
}

model School {
    id          String    @id @default(cuid())
    ownerId     String
    customerId  String?
    name        String?
    image       String?
    openingAt   DateTime?
    quota       Int?
    maxAssiged  Int?
    dropEnabled Boolean?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    invitations Invitation[]
    enrollments Enrollment[]
    tasks       Task[]
}

model Invitation {
    id        String   @id @default(cuid())
    schoolId  String
    email     String
    manager   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Enrollment {
    id        String   @id @default(cuid())
    schoolId  String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
    id           String    @id @default(cuid())
    schoolId     String
    category     String?
    title        String?
    description  String?
    startingDate DateTime? @db.Date
    endingDate   DateTime? @db.Date
    startingTime DateTime? @db.Timetz()
    endingTime   DateTime? @db.Timetz()
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

    assignments Assignment[]
}

model Assignment {
    id        String   @id @default(cuid())
    taskId    String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
